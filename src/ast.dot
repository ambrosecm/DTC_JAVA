digraph {
n0 [label="root (CompilationUnit)"];
n1 [label="packageDeclaration (PackageDeclaration)"];
n0 -> n1;
n2 [label="name (Name)"];
n1 -> n2;
n3 [label="identifier='example'"];
n2 -> n3;
n4 [label="comment (BlockComment)"];
n0 -> n4;
n5 [label="content='
 * Copyright (c) 2022 by Eyefreight BV (www.eyefreight.com). All rights reserved.
 *
 * This software is provided by the copyright holder and contributors \"as is\" and any express or implied warranties, including, but
 * not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. In no event shall
 * Eyefreight BV or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages
 * (including, but not limited to, procurement of substitute goods or services; * loss of use, data, or profits; or business
 * interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including
 * negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage.
 '"];
n4 -> n5;
n6 [label="types"];
n0 -> n6;
n7 [label="type (ClassOrInterfaceDeclaration)"];
n6 -> n7;
n8 [label="isInterface='false'"];
n7 -> n8;
n9 [label="name (SimpleName)"];
n7 -> n9;
n10 [label="identifier='Example1'"];
n9 -> n10;
n11 [label="comment (JavadocComment)"];
n7 -> n11;
n12 [label="content='
 * TODO javadoc
 *
 * @author daan.vandenheuvel
 '"];
n11 -> n12;
n13 [label="members"];
n7 -> n13;
n14 [label="member (FieldDeclaration)"];
n13 -> n14;
n15 [label="variables"];
n14 -> n15;
n16 [label="variable (VariableDeclarator)"];
n15 -> n16;
n17 [label="name (SimpleName)"];
n16 -> n17;
n18 [label="identifier='a'"];
n17 -> n18;
n19 [label="type (PrimitiveType)"];
n16 -> n19;
n20 [label="type='INT'"];
n19 -> n20;
n21 [label="member (MethodDeclaration)"];
n13 -> n21;
n22 [label="body (BlockStmt)"];
n21 -> n22;
n23 [label="statements"];
n22 -> n23;
n24 [label="statement (ReturnStmt)"];
n23 -> n24;
n25 [label="expression (NameExpr)"];
n24 -> n25;
n26 [label="name (SimpleName)"];
n25 -> n26;
n27 [label="identifier='a'"];
n26 -> n27;
n28 [label="type (PrimitiveType)"];
n21 -> n28;
n29 [label="type='INT'"];
n28 -> n29;
n30 [label="name (SimpleName)"];
n21 -> n30;
n31 [label="identifier='getA'"];
n30 -> n31;
n32 [label="modifiers"];
n21 -> n32;
n33 [label="modifier (Modifier)"];
n32 -> n33;
n34 [label="keyword='PUBLIC'"];
n33 -> n34;
n35 [label="member (MethodDeclaration)"];
n13 -> n35;
n36 [label="body (BlockStmt)"];
n35 -> n36;
n37 [label="statements"];
n36 -> n37;
n38 [label="statement (ExpressionStmt)"];
n37 -> n38;
n39 [label="expression (AssignExpr)"];
n38 -> n39;
n40 [label="operator='ASSIGN'"];
n39 -> n40;
n41 [label="target (FieldAccessExpr)"];
n39 -> n41;
n42 [label="name (SimpleName)"];
n41 -> n42;
n43 [label="identifier='a'"];
n42 -> n43;
n44 [label="scope (ThisExpr)"];
n41 -> n44;
n45 [label="value (NameExpr)"];
n39 -> n45;
n46 [label="name (SimpleName)"];
n45 -> n46;
n47 [label="identifier='inputA'"];
n46 -> n47;
n48 [label="type (VoidType)"];
n35 -> n48;
n49 [label="name (SimpleName)"];
n35 -> n49;
n50 [label="identifier='setA'"];
n49 -> n50;
n51 [label="modifiers"];
n35 -> n51;
n52 [label="modifier (Modifier)"];
n51 -> n52;
n53 [label="keyword='PUBLIC'"];
n52 -> n53;
n54 [label="parameters"];
n35 -> n54;
n55 [label="parameter (Parameter)"];
n54 -> n55;
n56 [label="isVarArgs='false'"];
n55 -> n56;
n57 [label="name (SimpleName)"];
n55 -> n57;
n58 [label="identifier='inputA'"];
n57 -> n58;
n59 [label="type (PrimitiveType)"];
n55 -> n59;
n60 [label="type='INT'"];
n59 -> n60;
n61 [label="modifiers"];
n7 -> n61;
n62 [label="modifier (Modifier)"];
n61 -> n62;
n63 [label="keyword='PUBLIC'"];
n62 -> n63;
}